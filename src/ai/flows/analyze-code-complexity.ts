
// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Analyzes the time and space complexity of a given code snippet and provides improvement suggestions.
 *
 * - analyzeCodeComplexity - A function that takes code as input and returns its time/space complexity and suggestions.
 * - AnalyzeCodeComplexityInput - The input type for the analyzeCodeComplexity function.
 * - AnalyzeCodeComplexityOutput - The return type for the analyzeCodeComplexity function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnalyzeCodeComplexityInputSchema = z.object({
  language: z.string().describe('The programming language of the code snippet.'),
  code: z.string().describe('The code snippet to analyze.'),
  title: z.string().describe('The title of the code snippet.'),
  explanationLevel: z.string().optional().describe('The desired level of detail for the explanation (e.g., Basic, Intermediate, Deep).'),
});

export type AnalyzeCodeComplexityInput = z.infer<typeof AnalyzeCodeComplexityInputSchema>;

const AnalyzeCodeComplexityOutputSchema = z.object({
  timeComplexity: z.string().describe('The time complexity of the code snippet.'),
  spaceComplexity: z.string().describe('The space complexity of the code snippet.'),
  explanation: z.string().describe('A brief explanation of the time and space complexity.'),
  improvementSuggestions: z.string().optional().describe('Suggestions to improve time or space complexity, if applicable. If no specific suggestions, state that the code is optimal or provide general advice.'),
});

export type AnalyzeCodeComplexityOutput = z.infer<typeof AnalyzeCodeComplexityOutputSchema>;

export async function analyzeCodeComplexity(
  input: AnalyzeCodeComplexityInput
): Promise<AnalyzeCodeComplexityOutput> {
  return analyzeCodeComplexityFlow(input);
}

const analyzeCodeComplexityPrompt = ai.definePrompt({
  name: 'analyzeCodeComplexityPrompt',
  input: {schema: AnalyzeCodeComplexityInputSchema},
  output: {schema: AnalyzeCodeComplexityOutputSchema},
  prompt: `You are an expert software engineer specializing in code analysis.

  Analyze the time and space complexity of the given code snippet.
  {{#if explanationLevel}}
  Provide an explanation at a {{{explanationLevel}}} level of detail.
  {{else}}
  Provide a brief explanation of your analysis.
  {{/if}}

  Language: {{{language}}}
  Title: {{{title}}}
  Code:
  \`\`\`{{{language}}}
  {{{code}}}
  \`\`\`

  Respond by providing:
  1. Time complexity.
  2. Space complexity.
  3. An explanation for the time and space complexity, adhering to the requested level of detail if specified.
  4. Suggestions for improving the time or space complexity. If the code is already optimal for its purpose or if suggestions are not applicable (e.g., for very simple snippets), clearly state that or offer general best practice advice related to performance for the given language. Format suggestions as a paragraph or bullet points.
  `,
});

const analyzeCodeComplexityFlow = ai.defineFlow(
  {
    name: 'analyzeCodeComplexityFlow',
    inputSchema: AnalyzeCodeComplexityInputSchema,
    outputSchema: AnalyzeCodeComplexityOutputSchema,
  },
  async input => {
    const {output} = await analyzeCodeComplexityPrompt(input);
    return output!;
  }
);

