
// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Validates if a given code snippet matches an expected programming language.
 *
 * - validateCodeLanguage - A function that takes code and an expected language, returns if it's a match.
 * - ValidateCodeLanguageInput - The input type for the validateCodeLanguage function.
 * - ValidateCodeLanguageOutput - The return type for the validateCodeLanguage function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ValidateCodeLanguageInputSchema = z.object({
  expectedLanguage: z.string().describe('The programming language the code snippet is expected to be in.'),
  code: z.string().describe('The code snippet to validate.'),
});

export type ValidateCodeLanguageInput = z.infer<typeof ValidateCodeLanguageInputSchema>;

const ValidateCodeLanguageOutputSchema = z.object({
  isValid: z.boolean().describe('Whether the code snippet is likely written in the expected programming language.'),
  detectedLanguage: z.string().optional().describe('The language the AI believes the code is written in, especially if it differs from the expected one.'),
  reasoning: z.string().describe('A brief explanation of why the AI believes the code is valid or invalid for the expected language.'),
});

export type ValidateCodeLanguageOutput = z.infer<typeof ValidateCodeLanguageOutputSchema>;

export async function validateCodeLanguage(
  input: ValidateCodeLanguageInput
): Promise<ValidateCodeLanguageOutput> {
  return validateCodeLanguageFlow(input);
}

const validateCodeLanguagePrompt = ai.definePrompt({
  name: 'validateCodeLanguagePrompt',
  input: {schema: ValidateCodeLanguageInputSchema},
  output: {schema: ValidateCodeLanguageOutputSchema},
  prompt: `You are an expert in programming language identification.
  Your task is to determine if the provided code snippet is written in the '{{{expectedLanguage}}}' language.

  Code Snippet:
  \`\`\`
  {{{code}}}
  \`\`\`

  Consider the syntax, keywords, and common patterns of '{{{expectedLanguage}}}'.

  Respond with:
  1.  'isValid': true if the code appears to be '{{{expectedLanguage}}}', false otherwise.
  2.  'detectedLanguage': If 'isValid' is false and you can confidently identify the actual language of the code, state it here. Otherwise, you can omit this or repeat the '{{{expectedLanguage}}}'.
  3.  'reasoning': Briefly explain your decision. For example, if it's not valid, mention what makes it look like a different language or why it doesn't match '{{{expectedLanguage}}}'. If it is valid, a short confirmation is fine.
  `,
});

const validateCodeLanguageFlow = ai.defineFlow(
  {
    name: 'validateCodeLanguageFlow',
    inputSchema: ValidateCodeLanguageInputSchema,
    outputSchema: ValidateCodeLanguageOutputSchema,
  },
  async input => {
    const {output} = await validateCodeLanguagePrompt(input);
    return output!;
  }
);
